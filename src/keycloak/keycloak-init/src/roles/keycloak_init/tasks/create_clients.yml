- assert:
    that:
      - (keycloak_auth_url is defined) and (keycloak_auth_url|length > 0)
      - (keycloak_realm is defined) and (keycloak_realm|length > 0)
      - (keycloak_access_token is defined) and (keycloak_access_token|length > 0)
      - (keycloak_clients is defined) and (keycloak_clients|length > 0)

- name: "Create Keycloak clients"
  uri:
    url: "{{ keycloak_auth_url }}/admin/realms/{{ keycloak_realm }}/clients"
    method: POST
    headers:
      authorization: "Bearer {{ keycloak_access_token }}"
    body_format: json
    body:
      clientId: "{{ item.client_id }}"
      enabled: true
      protocol: "openid-connect"
      clientAuthenticatorType: "client-secret"
      publicClient: "{{ item.public_client }}"
      serviceAccountsEnabled: "{{ item.service_accounts_enabled }}"
      redirectUris:
        - "*"
      webOrigins:
        - "*"
    status_code: 201, 409
  changed_when: output_create_ssp_client.status == 201
  register: output_create_ssp_client
  loop: "{{ keycloak_clients }}"

- set_fact:
    client_id: "self-service-portal"

- name: "Get uuid of '{{ client_id }}'"
  uri:
    url: "{{ keycloak_auth_url }}/admin/realms/{{ keycloak_realm }}/clients?clientId={{ client_id }}"
    method: GET
    headers:
      authorization: "Bearer {{ keycloak_access_token }}"
  register: output_get_client

- set_fact:
    client_uuid: "{{ output_get_client.json[0].id }}"

- name: "Create protocol mapper 'Group Mapper' for '{{ client_id }}'"
  uri:
    url: "{{ keycloak_auth_url }}/admin/realms/{{ keycloak_realm }}/clients/{{ client_uuid }}/protocol-mappers/models"
    method: POST
    headers:
      authorization: "Bearer {{ keycloak_access_token }}"
    body_format: json
    body:
      name: "Group Mapper"
      protocol: "openid-connect"
      protocolMapper: "oidc-group-membership-mapper"
      config:
        full.path: false
        id.token.claim: true
        access.token.claim: true
        claim.name: "groups"
        userinfo.token.claim: true
    status_code: 201, 409
  changed_when: output_create_client_protocol_mapper.status == 201
  register: output_create_client_protocol_mapper

- name: "Create protocol mapper 'Audience' for '{{ client_id }}'"
  uri:
    url: "{{ keycloak_auth_url }}/admin/realms/{{ keycloak_realm }}/clients/{{ client_uuid }}/protocol-mappers/models"
    method: POST
    headers:
      authorization: "Bearer {{ keycloak_access_token }}"
    body_format: json
    body:
      name: "Audience"
      protocol: "openid-connect"
      protocolMapper: "oidc-audience-mapper"
      config:
        included.client.audience: "{{ client_id }}"
        id.token.claim: "false"
        access.token.claim: "true"
    status_code: 201, 409
  changed_when: output_create_client_protocol_mapper.status == 201
  register: output_create_client_protocol_mapper

- include_role:
    name: keycloak_client
    tasks_from: roles/assign_client_role_to_service_account.yml
  vars:
    client_with_service_account_id: "resource-registry"
    client_id: "realm-management"
    client_role_name: "realm-admin"

- include_role:
    name: keycloak_client
    tasks_from: roles/assign_client_role_to_service_account.yml
  vars:
    client_with_service_account_id: "service-registry"
    client_id: "realm-management"
    client_role_name: "realm-admin"
